generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id            String     @id @default(uuid())
   name          String?
   uname         String?    @unique
   email         String?    @unique
   emailVerified DateTime?  @map("email_verified")
   image         String?
   createdAt     DateTime   @default(now())
   updatedAt     DateTime   @updatedAt
   password      String?
   accounts      Account[]
   BusOwner      BusOwner[]

   @@map("users")
}

model Account {
   id                String   @id @default(cuid())
   userId            String   @map("user_id")
   type              String?
   provider          String
   providerAccountId String   @map("provider_account_id")
   token_type        String?
   refresh_token     String?  @db.Text
   access_token      String?  @db.Text
   expires_at        Int?
   scope             String?
   id_token          String?  @db.Text
   createdAt         DateTime @default(now())
   updatedAt         DateTime @updatedAt
   user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
   @@map("accounts")
}

model City {
   id         Int         @id @default(autoincrement())
   name       String
   latitude   Decimal
   longitude  Decimal
   RouteStop  RouteStop[]
   MapFrom    Map[]       @relation("MapFrom")
   MapTo      Map[]       @relation("MapTo")
   BusTimeArr BusTime[]   @relation("arrival_city_id")
   BusTimeDep BusTime[]   @relation("departure_city_id")
}

model Route {
   id           Int         @id @default(autoincrement())
   route_number String
   RouteStop    RouteStop[]
   Time         BusTime[]
}

model RouteStop {
   id          Int   @id @default(autoincrement())
   stop_number Int
   city_id     Int
   route_id    Int
   city        City  @relation(fields: [city_id], references: [id])
   route       Route @relation(fields: [route_id], references: [id])
}

model Map {
   id           Int   @id @default(autoincrement())
   from         City  @relation(name: "MapFrom", fields: [from_city_id], references: [id])
   to           City  @relation(name: "MapTo", fields: [to_city_id], references: [id])
   distance     Float
   from_city_id Int
   to_city_id   Int
}

model BusTime {
   id                Int      @id @default(autoincrement())
   route             Route    @relation(fields: [routeId], references: [id])
   departure_city    City     @relation(name: "departure_city_id", fields: [departure_city_id], references: [id])
   departure_time    DateTime
   arrival_city      City     @relation(name: "arrival_city_id", fields: [arrival_city_id], references: [id])
   arrival_time      DateTime
   routeId           Int
   departure_city_id Int
   arrival_city_id   Int
}

model Bus {
   id         Int       @id @default(autoincrement())
   name       String?
   number     String?
   owner      BusOwner? @relation(fields: [busOwnerId], references: [id])
   type       BusType
   images     String[]
   busOwnerId Int?
}

enum BusType {
   NORMAL
   SEMI_LUXURY
   LUXURY
}

model BusOwner {
   id      Int    @id @default(autoincrement())
   user    User   @relation(fields: [userId], references: [id])
   contact String
   userId  String
   Bus     Bus[]
}
